{"name": "test_form_demoqa", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=118.0.5993.118)\nStacktrace:\n\tGetHandleVerifier [0x00B34DE3+43907]\n\t(No symbol) [0x00AC0741]\n\t(No symbol) [0x009B32B0]\n\t(No symbol) [0x009A5BE4]\n\t(No symbol) [0x009A450F]\n\t(No symbol) [0x009A4AF8]\n\t(No symbol) [0x009B5193]\n\t(No symbol) [0x00A15B61]\n\t(No symbol) [0x00A02B5C]\n\t(No symbol) [0x00A155CA]\n\t(No symbol) [0x00A02956]\n\t(No symbol) [0x009DE17E]\n\t(No symbol) [0x009DF32D]\n\tGetHandleVerifier [0x00DE5AF9+2865305]\n\tGetHandleVerifier [0x00E2E78B+3163435]\n\tGetHandleVerifier [0x00E28441+3138017]\n\tGetHandleVerifier [0x00BBE0F0+605840]\n\t(No symbol) [0x00ACA64C]\n\t(No symbol) [0x00AC6638]\n\t(No symbol) [0x00AC675F]\n\t(No symbol) [0x00AB8DB7]\n\tBaseThreadInitThunk [0x777105C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77E578BD+237]\n\tRtlGetAppContainerNamedObjectPath [0x77E5788D+189]", "trace": "def test_form_demoqa():\n        registration_page = RegistrationPage()\n        student = users.student\n    \n>       registration_page.open()\n\ntest_form_demoqa.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\qa_guru_python_8_12\\pages\\registration_page.py:14: in open\n    browser.open('/automation-practice-form')\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:1155: in open\n    self.config._executor.get_url(relative_or_absolute_url)\n..\\venv\\Lib\\site-packages\\selene\\core\\configuration.py:301: in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n..\\venv\\Lib\\site-packages\\selene\\core\\configuration.py:253: in get\n    driver.get(url)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:353: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002D4DDF87D50>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E578BD+237]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77E5788D+189]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=118.0.5993.118)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00B34DE3+43907]\nE       \t(No symbol) [0x00AC0741]\nE       \t(No symbol) [0x009B32B0]\nE       \t(No symbol) [0x009A5BE4]\nE       \t(No symbol) [0x009A450F]\nE       \t(No symbol) [0x009A4AF8]\nE       \t(No symbol) [0x009B5193]\nE       \t(No symbol) [0x00A15B61]\nE       \t(No symbol) [0x00A02B5C]\nE       \t(No symbol) [0x00A155CA]\nE       \t(No symbol) [0x00A02956]\nE       \t(No symbol) [0x009DE17E]\nE       \t(No symbol) [0x009DF32D]\nE       \tGetHandleVerifier [0x00DE5AF9+2865305]\nE       \tGetHandleVerifier [0x00E2E78B+3163435]\nE       \tGetHandleVerifier [0x00E28441+3138017]\nE       \tGetHandleVerifier [0x00BBE0F0+605840]\nE       \t(No symbol) [0x00ACA64C]\nE       \t(No symbol) [0x00AC6638]\nE       \t(No symbol) [0x00AC675F]\nE       \t(No symbol) [0x00AB8DB7]\nE       \tBaseThreadInitThunk [0x777105C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E578BD+237]\nE       \tRtlGetAppContainerNamedObjectPath [0x77E5788D+189]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "attachments": [{"name": "stderr", "source": "68e356e9-0806-4b4a-9ed4-45ed98970023-attachment.txt", "type": "text/plain"}], "start": 1698692971076, "stop": 1698692974335, "uuid": "6bef0408-0c70-44f1-a38a-b9a1a7f749d4", "historyId": "32dc684e215ecd8cfd24e159890f25d1", "testCaseId": "772c3306c7afa36c4ba56c473af374ea", "fullName": "tests.test_form_demoqa#test_form_demoqa", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_form_demoqa"}, {"name": "host", "value": "DESKTOP-U2EORTL"}, {"name": "thread", "value": "16340-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_form_demoqa"}]}